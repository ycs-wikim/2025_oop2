// 0325.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

/// 전처리기가 컴파일러보다 먼저 처리한다.
//#define 3.14 PI     /// typedef A B : A자료형을 B로 사용한다.
#define PI 3.14     /// #define A B : B를 A로 사용한다.
/// #define은 최대한 상수 정의로만 사용한다.
/// 절대로 아래와 같이 함수 형태로 만들어서 사용하지 말것!!!!!
#define SWAP(a, b) a ^= b; b ^= a; a ^= b;  /// a와 b의 값이 교환
#define SWAPP(a, b) { a ^= b; b ^= a; a ^= b; }

int main()
{
    /// TODO : 컴퓨터의 연산은 항상 임시 변수를 동반한다!

    /// 비교 연산자를 이용한 연산에서의 가장 많은 실수
    int a = 0;
    /// a = 10; 연산이 먼저 수행 : a가 어떤 값이던 10이 되어버림.
    /// if( a )로 연산이 변경. 무조건 참인 비교문이 되어버림.
    /// 아래와 같은 문제 해결을 위해 순서를 변경하는 습관이 필요!
    /// if (a = 10)
    /// 변수보다 상수가 먼저 비교 대상에 들어오도록 습관을 들일 것.
    if( 10 == a )
    {
        printf("a는 10과 같다.\n");
    }
    else
    {
        printf("a는 10이 아니다.\n");
    }

    /// 삼항 연산자
    /// ( 식 ) ? 참인 경우 실행 문장 : 거짓인 경우 실행 문장 ;
    (3 == 3) ? printf("Yes\n") : printf("No\n");

    /// sizeof( )연산자 ==> 메모리에 할당된 크기를 byte로 알려줌
    /// 사용방법 : sizeof( 변수 또는 자료형 )
    /// printf에서 sizeof( )를 정확하게 출력 : %zd 형식 문자열로
    printf("%zd %zd %zd\n", sizeof(__int64), sizeof(int), sizeof(a));
    /// 범위 (지정)연산자 -> ::
    /// 네임스페이스(이름공간)::인터페이스(함수)/API
    std::cout << "Hello World!\n";

    /// 형변환 : 자료형을 변환한다.
    /// 발생하는 문제점 : 정보의 손실이 발생!
    /// 1) 명시적 형변환 : 변경할 자료형을 앞에 기술
    ///     Ex) int x; char c = (char)x;
    ///     프로그래머가 변환될 정보를 이미 알고 정확하게 알림.
    ///     알림 대상 : 컴파일러
    /// 2) 암시/묵시적 형변환
    ///     Ex) int x; char c = x;
    ///     프로그래머가 실수로 놓치는 경우가 대부분.
    
    /// 예약어( 조건식/문장 ) 이렇게 생긴 문장들의 주요 특징
    ///     Ex) if( ), switch( ), for( )
    /// 바로 뒤의 한문장까지만 예약어 문장의 소유이다!

    if (0)      /// ( ) 결과 : 0이기 때문에 거짓
        printf("if 1\n");  /// if( ) 문장의 소유 : 참일때 실행
    /// if( ) 문장의 소유권이 없는 문장들의 시작
        printf("if 2\n");

        printf("if 3\n");

    /// 바로 뒤의 한문장만 예약어의 소유이기 때문에 실수가 있을 수 있다!
    if (1) ;
    /// ==> 바로 뒤의 문장이 즉시 ;으로 종료되어 참인경우 아무것도 하지 않는다.
    /// 한문장이 아니라 여러 문장을 소유하고 싶을때! {, }
    int k = 5;
    if (1)
    {
        int k = 9;
        printf("if - 1\n");
        printf("if - 2\n");
        printf("if - 3\n");
    }
    k = k + 10;
    /// 프로그램 작성 습관 : 예약어( ) { }를 여는 습관
    /// switch( ) { }      /// for( ; ; ) { }
    if (0)
    {
        printf("if - 1\n");
    }

    int i = 3;
    int j = 9;

CNN:            /// 라벨/레이블은 선언해도 문제는 없음.
                /// 단순히 위치 표시(주소)를 하기 위해서 사용되기 때문.
    if (0)
    {
BBC:
        SWAP(i, j);
    }
asdf:
    /*
        a ^= b;     /// if문의 소유이므로 실행되지 않음
        b ^= a;     /// if문의 소유가 아니므로 실행
        a ^= b;     /// if문의 소유가 아니므로 실행
    */
    printf("i[ %d ] j[ %d ]\n", i, j);

    /// switch( ) 뒤에 한문장만 switch( )의 소유
    /// {       /// 무조건 {를 열고 시작해야 한다!
    ///     case 1:
    ///         ~~~~;
    ///     case 2:
    ///         ~~~~;
    /// }       
    /// if( 조건식, 변수, 값 )
    /// switch( 변수, 식 )
    /// {
    ///     case 상수:         /// 라벨 : 위치 표시, 주소
    ///         { 문장; 문장; } /// 묶지 않아도 되지만 반드시 묶을 것.
    ///     break;          /// 나를 포함하는 가장 가까운 {, }를 빠져나간다.
    ///     case 상수:
    ///     break;
    ///     default:        /// {, }의 모든 상수와 값이 다른 경우 실행될 코드의 위치
    ///     break;
    /// }

    /// 특별한 처리가 아니라면, 절대로 switch~ case는 사용하지 말것!!!
    /// 검수/검사하는 사람들이 매우 싫어함! 느려짐!

    /// for( ) 바로 뒤의 한문장만이 for( )문장의 소유권
    /// for( 초기식 ; 조건식 ; 증감식 )
    ///     - 초기식 : 변수의 초기화 등을 수행,
    ///                 다수의 문장 입력 가능 : ,로 구분
    ///     - 조건식 : if문장의 조건식과 동일한 형태
    ///                 결과가 참/거짓만 나온다면 여러 문장을 사용해도 무방
    ///     - 증감식 : 반복에 영향을 미칠 수 있는 변화를 준다.
    ///                 다수의 문장 입력 가능 : ,로 구분
    for (i = 0, j = 0; i < j; i++, j++, a++)
    {

    }

}
