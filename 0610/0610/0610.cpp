// 0610.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include "Ccondes.h"
#include "CCalc.h"

/// 생성자와 소멸자
///     생성자와 소멸자는 모두 public 권한으로 설정되어야 한다!!!!!
///     호출되는 시점 : 먼저 메모리에 적재된 다음에 호출된다.
/// 
///  생성자 : 클래스가 객체화(인스턴스화) 될때 자동으로 호출되는 함수
///     선언 : 함수의 반환값이 없도록 선언. 클래스와 이름을 동일하게 선언.
///     생성자를 여러 개 선언할 수 있다.
///          ==> 매개 변수를 받을 수 있다.
///     초기 값 설정, 동작을 위한 메모리 할당 등 처음에 해야할 일들
/// 
///  소멸자 : 메모리에서 해제되는 시점에 자동으로 호출되는 함수
///     선언 : 함수의 반환값이 없도록 선언. 클래스와 이름을 동일하게 선언.
///             함수 이름 앞에 ~를 붙인다.
///     오직 단 한개만 소멸자를 선언할 수 있다.
///         ==> 매개 변수를 받을 수 없다!
///     메모리 할당 해제, 각종 연결 해제 등



int main()
{
    int i = 3;
    int j(i);           /// 복사 생성자를 이용한 초기화(생성자 호출)
    /// 객체지향 언어에서는 자료형도 하나의 클래스/객체로 사용된다.
    /// 객체지향 언어의 목표 : 모든 것을 클래스와 객체로 사용한다.
    int k = i + j;
    printf("i[ %d ] j[ %d ]\n", i, j);

    /// 인스턴스 생성 시 인수에 따라 원하는 생성자를 호출할 수 있다.
    Ccondes cd;         /// 인수가 없는 생성자
    Ccondes ci(3);      /// int 인수 생성자
    Ccondes cc('c');    /// char 인수 생성자
    Ccondes cii(3, 5);  /// int, int 인수 생성자

    //cd = ci + cc;

    CCalc a;
    CCalc b;

    a.m_value = 1;
    b.m_value = 2;

    /// operator + 를 CCalc 클래스에 구현했기 때문에 가능!
    ///     구현 : 숫자를 인수로 받는다. ==> 2
    ///     결과 : int 값이 반환
    int sum = a + 2;        /// OK
    //int summ = 2 + a;       /// X : 기준이 상수 2이기 때문에 불가능!
    printf("sum : %d\n", sum);

    /*
    CCalc sum1 = 1 + 2;
    CCalc sum2 = a + 2;
    CCalc sum3 = 1 + b;
    CCalc sum4 = a + b;
    */

    std::cout << "Hello World!\n";
}
